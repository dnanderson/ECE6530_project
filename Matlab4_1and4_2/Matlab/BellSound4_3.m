%% 4.3 The Bell Sound

%% Case 1 - fc=110 Hz; fm=220 Hz; I0=10; tau=2sec; dur=6sec; fs=11025;
%% a) Listen to sound by playing it with the soundsc function
%run bell function and create array of values

% ff = frequency vector (containing fc and fm)
ff1 = [110,220];
% Io = scale factor for modulation index
Io1 = 10;
% tau = decay parameter for A(t) and I(t)
tau1 = 2;
% dur = duration (in sec.) of the output signal
dur1 = 6;
% fsamp = sampling rate
fsamp1 = 11025;


y1 = bell(ff1,Io1,tau1,dur1,fsamp1);

%play the sound (array and sampling rate)
soundsc(y1, fsamp1);

%% b) Calculate the fundamental frequency of the "note" being played. 

% The fundamental frequency is calculated by finding the fourier transform
% or FFT of the bell sound and finding the frequency value with the first
% promiment peak. Any peaks that occur above this frequency are simply 
% harmonics.
% (https://www.mathworks.com/help/matlab/math/fourier-transforms.html)
m1 = length(y1);
n1 = pow2(nextpow2(m1));
y1fft = fft(y1, n1);
f1 = (0:n)*fsamp1/n1;
power1 = abs(y1fft).^2/n1;

figure();
plot(f1(1:floor(n1/2)),power1(1:floor(n1/2)));

peaks1 = islocalmax(power1, 'MinProminence', 1);
f01 = 0;
for i = 1:length(peaks1)
    if(peaks1(i) == 1)
        f01 = i*fsamp1/n;
        break;
    else
        continue;
    end
end


%%Explain how you can verify by listening that you have the correct fundamental frequency.
% Just by listening, we can verify that we have the correct fundamental
% frequency by varying the carrier and modulating function parameters to get higher
% and lower toned sounds and see if our fundamental frequency calcuation is
% also going up and down with the tone changes. We can also compare the sound of our created
% note with the sound of the calculated natural freqeuncy using an online tone generator. 


%% c) Describe how you can hear the frequency content changing according to I(t)


%%Plot fi(t) versus t for comparison


%% d) Display a spectrogram of the signal

%%Describe how the frequency content changes, and how that change is related to I(t)


%%Point out the "harmonic” structure of the spectrogram, and calculate the fundamental frequency, f0

%% e) Plot the entire signal and compare it to the envelope A(t) generated by bellenv

%plot the figure
figure();
plot(y1);
set(gca,'FontSize',14); %set font size
title('Amplitude vs. Sample','FontSize',14); %Title
xlabel('Sample', 'FontSize',14);% X-axis Label
ylabel('Amplitude', 'FontSize',14);% Y-axis Label
drawnow; %ensure drawings are complete

%% f) Plot about 100–200 samples from the middle of the signal and explain what you see, especially the frequency variation.



%% Case 2 - fc=220 Hz; fm=440 Hz; I0=5; tau=2sec; dur=6sec; fs=11025;
%% a) Listen to sound by playing it with the soundsc function
%run bell function and create array of values

% ff = frequency vector (containing fc and fm)
ff2 = [220,440];
% Io = scale factor for modulation index
Io2 = 5;
% tau = decay parameter for A(t) and I(t)
tau2 = 2;
% dur = duration (in sec.) of the output signal
dur2 = 6;
% fsamp = sampling rate
fsamp2 = 11025;


y2 = bell(ff2,Io2,tau2,dur2,fsamp2);

%play the sound (array and sampling rate)
soundsc(y2, fsamp2);
%% b) Calculate the fundamental frequency of the "note" being played. 

% The fundamental frequency is calculated by finding the fourier transform
% or FFT of the bell sound and finding the frequency value with the first
% promiment peak. Any peaks that occur above this frequency are simply 
% harmonics.
% (https://www.mathworks.com/help/matlab/math/fourier-transforms.html)
m2 = length(y2);
n2 = pow2(nextpow2(m2));
y2fft = fft(y2, n2);
f2 = (0:n)*fsamp2/n2;
power2 = abs(y2fft).^2/n2;

figure();
plot(f2(1:floor(n2/2)),power2(1:floor(n2/2)));

peaks2 = islocalmax(power2, 'MinProminence', 1);
f02 = 0;
for i = 1:length(peaks2)
    if(peaks2(i) == 1)
        f02 = i*fsamp2/n;
        break;
    else
        continue;
    end
end

%%Explain how you can verify by listening that you have the correct fundamental frequency.
% Just by listening, we can verify that we have the correct fundamental
% frequency by varying the carrier and modulating function parameters to get higher
% and lower toned sounds and see if our fundamental frequency calcuation is
% also going up and down with the tone changes. We can also compare the sound of our created
% note with the sound of the calculated natural freqeuncy using an online tone generator.
%plot the figure

figure();
plot(y2);
set(gca,'FontSize',14); %set font size
title('Amplitude vs. Sample','FontSize',14); %Title
xlabel('Sample', 'FontSize',14);% X-axis Label
ylabel('Amplitude', 'FontSize',14);% Y-axis Label
drawnow; %ensure drawings are complete

%% Case 3 - fc=110 Hz; fm=220 Hz; I0=10; tau=12sec; dur=3sec; fs=11025;
%% a) Listen to sound by playing it with the soundsc function
%run bell function and create array of values

% ff = frequency vector (containing fc and fm)
ff3 = [110,220];
% Io = scale factor for modulation index
Io3 = 10;
% tau = decay parameter for A(t) and I(t)
tau3 = 12;
% dur = duration (in sec.) of the output signal
dur3 = 3;
% fsamp = sampling rate
fsamp3 = 11025;


y3 = bell(ff3,Io3,tau3,dur3,fsamp3);

%play the sound (array and sampling rate)
soundsc(y3, fsamp3);

%% b) Calculate the fundamental frequency of the "note" being played. 

% The fundamental frequency is calculated by finding the fourier transform
% or FFT of the bell sound and finding the frequency value with the first
% promiment peak. Any peaks that occur above this frequency are simply 
% harmonics.
% (https://www.mathworks.com/help/matlab/math/fourier-transforms.html)
m3 = length(y3);
n3 = pow2(nextpow2(m3));
y3fft = fft(y3, n3);
f3 = (0:n3)*fsamp3/n3;
power3 = abs(y3fft).^2/n3;

figure();
plot(f3(1:floor(n3/2)),power3(1:floor(n3/2)));

peaks3 = islocalmax(power3, 'MinProminence', 1);
f03 = 0;
for i = 1:length(peaks3)
    if(peaks3(i) == 1)
        f03 = i*fsamp3/n3;
        break;
    else
        continue;
    end
end

%%Explain how you can verify by listening that you have the correct fundamental frequency.
% Just by listening, we can verify that we have the correct fundamental
% frequency by varying the carrier and modulating function parameters to get higher
% and lower toned sounds and see if our fundamental frequency calcuation is
% also going up and down with the tone changes. We can also compare the sound of our created
% note with the sound of the calculated natural freqeuncy using an online tone generator.
%plot the figure

%plot the figure
figure();
plot(y3);
set(gca,'FontSize',14); %set font size
title('Amplitude vs. Sample','FontSize',14); %Title
xlabel('Sample', 'FontSize',14);% X-axis Label
ylabel('Amplitude', 'FontSize',14);% Y-axis Label
drawnow; %ensure drawings are complete

%% Case 4 - fc=110 Hz; fm=220 Hz; I0=10; tau=.3sec; dur=3sec; fs=11025;

%run bell function and create array of values

% ff = frequency vector (containing fc and fm)
ff4 = [110,220];
% Io = scale factor for modulation index
Io4 = 10;
% tau = decay parameter for A(t) and I(t)
tau4 = .3;
% dur = duration (in sec.) of the output signal
dur4 = 3;
% fsamp = sampling rate
fsamp4 = 11025;


y4 = bell(ff4,Io4,tau4,dur4,fsamp4);

%play the sound (array and sampling rate)
soundsc(y4, fsamp4);

%plot the figure
figure();
plot(y4);
set(gca,'FontSize',14); %set font size
title('Amplitude vs. Sample','FontSize',14); %Title
xlabel('Sample', 'FontSize',14);% X-axis Label
ylabel('Amplitude', 'FontSize',14);% Y-axis Label
drawnow; %ensure drawings are complete

%% Case 5 - fc=250 Hz; fm=350 Hz; I0=5; tau=2sec; dur=5sec; fs=11025;

%run bell function and create array of values

% ff = frequency vector (containing fc and fm)
ff5 = [250,350];
% Io = scale factor for modulation index
Io5 = 5;
% tau = decay parameter for A(t) and I(t)
tau5 = 2;
% dur = duration (in sec.) of the output signal
dur5 = 5;
% fsamp = sampling rate
fsamp5 = 11025;


y5 = bell(ff5,Io5,tau5,dur5,fsamp5);

%play the sound (array and sampling rate)
soundsc(y5, fsamp5);

%plot the figure
figure();
plot(y5);
set(gca,'FontSize',14); %set font size
title('Amplitude vs. Sample','FontSize',14); %Title
xlabel('Sample', 'FontSize',14);% X-axis Label
ylabel('Amplitude', 'FontSize',14);% Y-axis Label
drawnow; %ensure drawings are complete

%% Case 6 - fc=250 Hz; fm=350 Hz; I0=3; tau=1sec; dur=5sec; fs=11025;

%run bell function and create array of values

% ff = frequency vector (containing fc and fm)
ff6 = [250,350];
% Io = scale factor for modulation index
Io6 = 3;
% tau = decay parameter for A(t) and I(t)
tau6 = 1;
% dur = duration (in sec.) of the output signal
dur6 = 5;
% fsamp = sampling rate
fsamp6 = 11025;


y6 = bell(ff6,Io6,tau6,dur6,fsamp6);

%play the sound (array and sampling rate)
soundsc(y6, fsamp6);

%plot the figure
figure();
plot(y6);
set(gca,'FontSize',14); %set font size
title('Amplitude vs. Sample','FontSize',14); %Title
xlabel('Sample', 'FontSize',14);% X-axis Label
ylabel('Amplitude', 'FontSize',14);% Y-axis Label
drawnow; %ensure drawings are complete
